From 985c10bf073a4761e3fe46bd74962d978c8ede17 Mon Sep 17 00:00:00 2001
From: Willy Tarreau <w@1wt.eu>
Date: Mon, 19 Dec 2016 23:24:59 +0100
Subject: [PATCH 12/13] net: e1000e: add an option to disable stats

We don't need these ones in embedded systems, they're used by ethtool -S
and take about 1.5 kB of xz-compressed image.
---
 drivers/net/ethernet/intel/Kconfig          |  7 +++++++
 drivers/net/ethernet/intel/e1000e/ethtool.c | 10 ++++++++++
 drivers/net/ethernet/intel/e1000e/netdev.c  |  6 ++++++
 3 files changed, 23 insertions(+)

diff --git a/drivers/net/ethernet/intel/Kconfig b/drivers/net/ethernet/intel/Kconfig
index c57ca7f..591025c 100644
--- a/drivers/net/ethernet/intel/Kconfig
+++ b/drivers/net/ethernet/intel/Kconfig
@@ -100,6 +100,13 @@ config E1000E_DIAG
 	---help---
 	  Say Y if you want to enable the ethtool diag in the e1000e driver (+6kB).
 
+config E1000E_STATS
+	bool "Intel(R) PRO/1000 stats support"
+	default y
+	depends on E1000E
+	---help---
+	  Say Y if you want to enable the ethtool stats in the e1000e driver (+1.5kB).
+
 config IGB
 	tristate "Intel(R) 82575/82576 PCI-Express Gigabit Ethernet support"
 	depends on PCI
diff --git a/drivers/net/ethernet/intel/e1000e/ethtool.c b/drivers/net/ethernet/intel/e1000e/ethtool.c
index a6061d9..eecaef6 100644
--- a/drivers/net/ethernet/intel/e1000e/ethtool.c
+++ b/drivers/net/ethernet/intel/e1000e/ethtool.c
@@ -59,6 +59,7 @@ struct e1000_stats {
 		.sizeof_stat = sizeof(((struct rtnl_link_stats64 *)0)->m), \
 		.stat_offset = offsetof(struct rtnl_link_stats64, m) }
 
+#ifdef CONFIG_E1000E_STATS
 static const struct e1000_stats e1000_gstrings_stats[] = {
 	E1000_STAT("rx_packets", stats.gprc),
 	E1000_STAT("tx_packets", stats.gptc),
@@ -122,6 +123,7 @@ static const char e1000_gstrings_test[][ETH_GSTRING_LEN] = {
 };
 
 #define E1000_TEST_LEN ARRAY_SIZE(e1000_gstrings_test)
+#endif
 
 static int e1000_get_settings(struct net_device *netdev,
 			      struct ethtool_cmd *ecmd)
@@ -1712,6 +1714,7 @@ static int e1000_link_test(struct e1000_adapter *adapter, u64 *data)
 }
 #endif
 
+#ifdef CONFIG_E1000E_STATS
 static int e1000e_get_sset_count(struct net_device __always_unused *netdev,
 				 int sset)
 {
@@ -1724,6 +1727,7 @@ static int e1000e_get_sset_count(struct net_device __always_unused *netdev,
 		return -EOPNOTSUPP;
 	}
 }
+#endif
 
 #ifdef CONFIG_E1000E_DIAG
 static void e1000_diag_test(struct net_device *netdev,
@@ -1977,6 +1981,7 @@ static int e1000_nway_reset(struct net_device *netdev)
 	return 0;
 }
 
+#ifdef CONFIG_E1000E_STATS
 static void e1000_get_ethtool_stats(struct net_device *netdev,
 				    struct ethtool_stats __always_unused *stats,
 				    u64 *data)
@@ -2026,6 +2031,7 @@ static void e1000_get_strings(struct net_device __always_unused *netdev,
 		break;
 	}
 }
+#endif
 
 static int e1000_get_rxnfc(struct net_device *netdev,
 			   struct ethtool_rxnfc *info,
@@ -2250,10 +2256,14 @@ static const struct ethtool_ops e1000_ethtool_ops = {
 #ifdef CONFIG_E1000E_DIAG
 	.self_test		= e1000_diag_test,
 #endif
+#ifdef CONFIG_E1000E_STATS
 	.get_strings		= e1000_get_strings,
+#endif
 	.set_phys_id		= e1000_set_phys_id,
+#ifdef CONFIG_E1000E_STATS
 	.get_ethtool_stats	= e1000_get_ethtool_stats,
 	.get_sset_count		= e1000e_get_sset_count,
+#endif
 	.get_coalesce		= e1000_get_coalesce,
 	.set_coalesce		= e1000_set_coalesce,
 	.get_rxnfc		= e1000_get_rxnfc,
diff --git a/drivers/net/ethernet/intel/e1000e/netdev.c b/drivers/net/ethernet/intel/e1000e/netdev.c
index a27e3bc..5d49177 100644
--- a/drivers/net/ethernet/intel/e1000e/netdev.c
+++ b/drivers/net/ethernet/intel/e1000e/netdev.c
@@ -4566,6 +4566,7 @@ release:
  **/
 static void e1000e_update_stats(struct e1000_adapter *adapter)
 {
+#ifdef CONFIG_E1000E_STATS
 	struct net_device *netdev = adapter->netdev;
 	struct e1000_hw *hw = &adapter->hw;
 	struct pci_dev *pdev = adapter->pdev;
@@ -4672,6 +4673,7 @@ static void e1000e_update_stats(struct e1000_adapter *adapter)
 		    (pbeccsts & E1000_PBECCSTS_UNCORR_ERR_CNT_MASK) >>
 		    E1000_PBECCSTS_UNCORR_ERR_CNT_SHIFT;
 	}
+#endif
 }
 
 /**
@@ -5603,6 +5605,7 @@ static void e1000_reset_task(struct work_struct *work)
  *
  * Returns the address of the device statistics structure.
  **/
+#ifdef CONFIG_E1000E_STATS
 struct rtnl_link_stats64 *e1000e_get_stats64(struct net_device *netdev,
 					     struct rtnl_link_stats64 *stats)
 {
@@ -5643,6 +5646,7 @@ struct rtnl_link_stats64 *e1000e_get_stats64(struct net_device *netdev,
 	spin_unlock(&adapter->stats64_lock);
 	return stats;
 }
+#endif
 
 /**
  * e1000_change_mtu - Change the Maximum Transfer Unit
@@ -6458,7 +6462,9 @@ static const struct net_device_ops e1000e_netdev_ops = {
 	.ndo_open		= e1000_open,
 	.ndo_stop		= e1000_close,
 	.ndo_start_xmit		= e1000_xmit_frame,
+#ifdef CONFIG_E1000E_STATS
 	.ndo_get_stats64	= e1000e_get_stats64,
+#endif
 	.ndo_set_rx_mode	= e1000e_set_rx_mode,
 	.ndo_set_mac_address	= e1000_set_mac,
 	.ndo_change_mtu		= e1000_change_mtu,
-- 
1.7.12.1

