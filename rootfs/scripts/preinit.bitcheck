#!/boot/kexec/init <
# The interpreter automatically builds : mem, kmem, null, zero,
# random, urandom, tty0, tty, console, ptmx, initctl, full, fd

mt /proc /proc proc rw

# we first try to mount /tmp as a tmpfs, next /var if it fails.
# this is dangerous on hard disks, since it will mount /var as
# a tmpfs if /tmp is non-existent. We would need to check for
# the existence of /tmp as a link before doing this.
mt /tmp /tmp tmpfs rw
|{
  mt /var /var tmpfs rw mode=755
  ln var/tmp /tmp	# just in case there were nothing
}
md /var/tmp 1777
md /var/run 755
md /dev/pts 755

bl 0600 0 0 3 0 hd[c,ab,64][I,0-16,1]
bl 0600 0 0 22 0 hd[c,cd,64][I,0-16,1]
bl 0600 0 0 33 0 hd[c,ef,64][I,0-16,1]
bl 0600 0 0 8 0 sd[c,a-h,16][I,0-15,1]
md /dev/rd 755		# DAC960 raid disks (majors 48-55)
bl 0600 0 0 48 0 rd/c0d[i,0-31,8]
bl 0600 0 0 48 1 rd/c0d[i,0-31,8]p[i,1-7,1]
md /dev/ida 755		# Compaq raid disks (majors 72-79)
bl 0600 0 0 72 0 ida/c0d[i,0-15,16]
bl 0600 0 0 72 1 ida/c0d[i,0-15,16]p[i,1-15,1]
md /dev/cciss 755       # Compaq CCISS raid disks (major 104)
bl 0600 0 0 104 0 cciss/c0d[i,0-15,16]
bl 0600 0 0 104 1 cciss/c0d[i,0-15,16]p[i,1-15,1]
bl 0600 0 0 11 0 sr[i,0-16,1]
ch 0600 0 0 9 0 st[i,0-15,1]
bl 0600 0 0 9 0 md[i,0-15,1]
bl 0600 0 0 2 0 fd0
bl 0600 0 0 2 28 fd0u1440
ch 0600 0 5 2 0 pty[c,p-za-f,16][h,0-f,1]
ch 0600 0 5 3 0 tty[c,p-za-f,16][h,0-f,1]
ch 0600 0 5 4 1 tty[i,1-12,1]
bl 0600 0 0 7 0 loop[i,0-9,1]
bl 0600 0 0 1 0 ram[i,0-9,1]
ch 0600 0 5 4 64 ttyS[i,0-9,1]
ch 0600 0 0 108 0 ppp
ch 0600 0 3 10 1 psaux
ch 0600 0 0 10 144 nvram
ch 0600 0 0 10 130 watchdog
ch 0600 0 0 10 135 rtc
ch 0600 0 0 10 156 lcd
ch 0600 0 0 10 185 keypad
ch 0600 0 0 10 186 smartcard
bl 0400 0 0 1 250 initrd
ch 0600 0 0 14 0 mixer
ch 0600 0 0 14 3 dsp
md /dev/input 755
ch 0600 0 0 13 63 input/mice
md /dev/fs 755

ln psaux /dev/mouse

md /dev/net 755
ch 0600 0 0 10 200 /dev/net/tun

te INITSHELL=1
&rd "You have requested this prompt by appending INITSHELL=1 to the kernel cmd line."

# we'll be using the 1st byte of the partition to hold the boot status
# bit 0 : normal boot = active(0) / backup(1)
# bit 1 : last boot was active(0) / backup(1)
# bit 2 : last boot was normal(0) / recovery(1)
# bit 3 : last boot  completed(0) / started(1)

# if the user asked to switch the boot image, we'll clear the boot status,
# try it, then fall back to the common failure handler if needed.

te IMAGE=active
&{
  ec ">>> Booting on ACTIVE image."
  /boot/kexec/bitcheck /dev/hdc1 0 -s 0xF 0x8
  /boot/kexec/kexec -l --command-line="auto ro root=/dev/hdc1" /boot/active
  /boot/kexec/kexec -e
  ec ">>> FAILED !"
}
|te IMAGE=backup
&{
  ec ">>> Booting on BACKUP image."
  /boot/kexec/bitcheck /dev/hdc1 0 -s 0xF 0xB
  /boot/kexec/kexec -l --command-line="auto ro root=/dev/hdc1" /boot/backup
  /boot/kexec/kexec -e
  ec ">>> FAILED !"
}
|/boot/kexec/bitcheck /dev/hdc1 0 -t 0x8
# if we have bit 3 set here, it means that previous boot did not complete
&{
  /boot/kexec/bitcheck /dev/hdc1 0 -t 0x4
  # if we have bit 2 set here, it means that previous recovery failed
  &{
    ec ">>> WARNING! previous recovery boot failed. Going back to normal boot."
    /boot/kexec/bitcheck /dev/hdc1 0 -s 0xE 0x8
    st /boot/active
    &/boot/kexec/kexec -l --command-line="auto ro root=/dev/hdc1 KEXEC=active" /boot/active
    &/boot/kexec/kexec -e
    ec ">>> FAILED !"
  }
  |{
    # the previous standard boot failed
    /boot/kexec/bitcheck /dev/hdc1 0 -t 0x2
    &{
      # was booting backup, let's try active
      ec ">>> WARNING! previous boot on BACKUP image failed. Trying ACTIVE."
      /boot/kexec/bitcheck /dev/hdc1 0 -x 0x2
      st /boot/active
      &/boot/kexec/kexec -l --command-line="auto ro root=/dev/hdc1 KEXEC=active" /boot/active
      &/boot/kexec/kexec -e
      ec ">>> FAILED !"
    }
    |{
      # was booting active, let's try backup
      ec ">>> WARNING! previous boot on ACTIVE image failed. Trying BACKUP."
      /boot/kexec/bitcheck /dev/hdc1 0 -x 0x2
      st /boot/backup
      &/boot/kexec/kexec -l --command-line="auto ro root=/dev/hdc1 KEXEC=backup" /boot/backup
      &/boot/kexec/kexec -e
      ec ">>> FAILED !"
    }
  } # end last != recovery
} # end failed boot
|{ # last boot was OK
  ec ">>> Last boot was successful."
  /boot/kexec/bitcheck /dev/hdc1 0 -t 0x1
  &{ # configured boot is BACKUP
    ec ">>> Booting on BACKUP image."
    /boot/kexec/bitcheck /dev/hdc1 0 -s 0xE 0xA
    st /boot/backup
    &/boot/kexec/kexec -l --command-line="auto ro root=/dev/hdc1 KEXEC=backup" /boot/backup
    &/boot/kexec/kexec -e
    ec ">>> FAILED !"
  }
  |{ # configured boot is ACTIVE
    ec ">>> Booting on ACTIVE image."
    /boot/kexec/bitcheck /dev/hdc1 0 -s 0xE 0x8
    st /boot/active
    &/boot/kexec/kexec -l --command-line="auto ro root=/dev/hdc1 KEXEC=active" /boot/active
    &/boot/kexec/kexec -e
    ec ">>> FAILED !"
  }
} # end last boot OK

# Now we know that the first boot attempt has failed. We have
# to check what image was tried and switch to the other one.

/boot/kexec/bitcheck /dev/hdc1 0 -t 0x2
&{
  # was booting backup, let's try active
  ec ">>> Failed to boot on BACKUP image, trying ACTIVE."
  /boot/kexec/bitcheck /dev/hdc1 0 -x 0x2
  st /boot/active
  &/boot/kexec/kexec -l --command-line="auto ro root=/dev/hdc1 KEXEC=active" /boot/active
  &/boot/kexec/kexec -e
  ec ">>> FAILED !"
}
|{
  # was booting active, let's try backup
  ec ">>> Failed to boot on ACTIVE image, trying BACKUP."
  /boot/kexec/bitcheck /dev/hdc1 0 -x 0x2
  st /boot/backup
  &/boot/kexec/kexec -l --command-line="auto ro root=/dev/hdc1 KEXEC=backup" /boot/backup
  &/boot/kexec/kexec -e
  ec ">>> FAILED !"
}

# we did not manage to boot on any image. Mark this as a recovery boot.
/boot/kexec/bitcheck /dev/hdc1 0 -s 0xE 0xC
ec ">>> CRITICAL ERROR! no bootable image found. Entering RECOVERY mode."
ec ">>> Setting IP address 10.0.0.1/16 on eth0, and starting sshd on port 64558."
/sbin/ip a a 10.0.0.1/16 dev eth0
/sbin/ip li set eth0 up
/boot/kexec/dropbear -d /boot/kexec/dsskey -r /boot/kexec/rsakey -p 64558
#/usr/sbin/sshd -p 64558 -q
rd ">>> Waiting for user input. Enter '/bin/sh' to get a shell."
  
in /sbin/init-sysv

